var Rehacked = require('./rehacked');
var ElementMatcher = require('./element_matcher');
var _ = require('./util');

module.exports = function (React) {
  function search(expression, idx, nodeChildren, hack) {
    var theEnd = expression.length === idx+1;
    var matcher = new ElementMatcher(expression[idx]);
    var foundChildren = [];
    _.compact(nodeChildren).forEach((child) => {
      if (_.isArray(child)) {
        search(expression, idx, child, hack);
      } else {
        var matches = matcher.test(child);
        var hasChildren = child.props && child.props.children;
        if (!matches && hasChildren && matcher.shouldTraverse()) {
          child.props.children = _.asArray(child.props.children);
          search(expression, idx, child.props.children, hack);
        } else if (matches && !theEnd && hasChildren) {
          child.props.children = _.asArray(child.props.children);
          search(expression, idx+1, child.props.children, hack);
        } else if (matches && theEnd) {
          foundChildren.push(child);
        }
      }
    });
    foundChildren.forEach((foundChild) => {
      var idx = nodeChildren.indexOf(foundChild);
      var hackElement = React.createElement(hack.reactClass, {reference: foundChild});
      if (hack.location === -1) {
        nodeChildren.splice(idx, 0, hackElement);
      } else if (hack.location === 1) {
        nodeChildren.splice(idx+1, 0, hackElement);
      } else if (hack.location === 0) {
        nodeChildren.splice(idx, 1, hackElement);
      }
    });
  }

  var inst = new Rehacked();
  var _createClass = React.createClass;
  React.createClass = function(spec /*, arguments*/) {
    var _render = spec.render;
    var componentName = spec.displayName;
    spec.render = function (/* arguments */) {
      var renderedComponent = _render.apply(this, arguments);
      if (inst.isAnythingBeingHacked() && inst.isBeingHacked(componentName)) {
        var hacks = inst._getEntry(componentName);
        hacks.forEach((hack) => {
          var expressions = hack.selector.expressions;
          expressions && expressions.forEach((expression) => {
            search(expression, 0, [renderedComponent], hack);
          })
        });
      }
      return renderedComponent;
    };
    return _createClass.apply(React, arguments);
  };

  return inst;
};


/** WEBPACK FOOTER **
 ** ./~/rehacked/src/js/main.js
 **/