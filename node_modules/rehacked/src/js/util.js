var hasOwnProperty = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = {
  extend: function(obj, source) {
    var prop;
    for (prop in source) {
      if (hasOwnProperty.call(source, prop)) {
        obj[prop] = source[prop];
      }
    }
    return obj;
  },
  isArray: function(obj) {
    return toString.call(obj) === '[object Array]';
  },
  pluck: function(arr, key) {
    var output = [];
    arr.forEach((item) => {
      output.push(item[key]);
    });
    return output;
  },
  every: function(arr, predicate, ctx) {
    var matching = true;
    arr.forEach((item) => {
      matching = matching && predicate.call(ctx, item)
    });
    return matching;
  },
  compact: function (arr) {
    var results = [];
    arr.forEach((item) => {
        if (item) results.push(item);
    });
    return results;
  },
  asArray: function(val) {
    return this.isArray(val) ? val : [val];
  }
};


/** WEBPACK FOOTER **
 ** ./~/rehacked/src/js/util.js
 **/